using Intel.UPNP;

namespace Wnms04.UpnpStack
{
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class P5_04 : IUPnPService
    {

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _P5_04 _S;
        public static string URN = "urn:schemas-upnp-org:service:control:1";
        public double VERSION
        {
           get
           {
               return(double.Parse(_S.GetUPnPService().Version));
           }
        }

		public delegate void OnLog(string logData);
		public event OnLog OnLogEvent;

        public delegate void OnStateVariableModifiedHandler(P5_04 sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_PageMax;
        public event OnStateVariableModifiedHandler OnStateVariableModified_Power;
        public event OnStateVariableModifiedHandler OnStateVariableModified_File;
        public event OnStateVariableModifiedHandler OnStateVariableModified_PageNumber;
        public event OnStateVariableModifiedHandler OnStateVariableModified_Files;
        public System.Int32 Evented_PageMax
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("PageMax"));
            }
            set
            {
               _S.SetStateVariable("PageMax", value);
            }
        }
        public System.Boolean Evented_Power
        {
            get
            {
               return((System.Boolean)_S.GetStateVariable("Power"));
            }
            set
            {
               _S.SetStateVariable("Power", value);
            }
        }
        public System.String Evented_File
        {
            get
            {
               return((System.String)_S.GetStateVariable("File"));
            }
            set
            {
               _S.SetStateVariable("File", value);
            }
        }
        public System.Int32 Evented_PageNumber
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("PageNumber"));
            }
            set
            {
               _S.SetStateVariable("PageNumber", value);
            }
        }
        public System.String Evented_Files
        {
            get
            {
               return((System.String)_S.GetStateVariable("Files"));
            }
            set
            {
               _S.SetStateVariable("Files", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_PageMax
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PageMax")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PageMax")).Accumulator = value;
            }
        }
        public double ModerationDuration_PageMax
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PageMax")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PageMax")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Power
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Power")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Power")).Accumulator = value;
            }
        }
        public double ModerationDuration_Power
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Power")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Power")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_File
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("File")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("File")).Accumulator = value;
            }
        }
        public double ModerationDuration_File
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("File")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("File")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_PageNumber
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PageNumber")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PageNumber")).Accumulator = value;
            }
        }
        public double ModerationDuration_PageNumber
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PageNumber")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PageNumber")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Files
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Files")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Files")).Accumulator = value;
            }
        }
        public double ModerationDuration_Files
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Files")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Files")).ModerationPeriod = value;
            }
        }
        public delegate void Delegate_GetFiles(out System.String Files);
        public delegate void Delegate_GetStatus(out System.String File, out System.Boolean Power, out System.Int32 PageNumber);
        public delegate void Delegate_Go(System.Int32 PageNumber);
        public delegate void Delegate_NextPage(out System.Int32 PageNumber);
        public delegate void Delegate_PowerOff(out System.Boolean Power);
        public delegate void Delegate_PowerOn(System.String File, out System.Int32 PageNumber, out System.Int32 PageMax, out System.Boolean Power);
        public delegate void Delegate_PreviousPage(out System.Int32 PageNumber);

        public Delegate_GetFiles External_GetFiles = null;
        public Delegate_GetStatus External_GetStatus = null;
        public Delegate_Go External_Go = null;
        public Delegate_NextPage External_NextPage = null;
        public Delegate_PowerOff External_PowerOff = null;
        public Delegate_PowerOn External_PowerOn = null;
        public Delegate_PreviousPage External_PreviousPage = null;

        public void RemoveStateVariable_PageMax()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("PageMax"));
        }
        public void RemoveStateVariable_Power()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("Power"));
        }
        public void RemoveStateVariable_File()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("File"));
        }
        public void RemoveStateVariable_PageNumber()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("PageNumber"));
        }
        public void RemoveStateVariable_Files()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("Files"));
        }
        public void RemoveAction_GetFiles()
        {
             _S.GetUPnPService().RemoveMethod("GetFiles");
        }
        public void RemoveAction_GetStatus()
        {
             _S.GetUPnPService().RemoveMethod("GetStatus");
        }
        public void RemoveAction_Go()
        {
             _S.GetUPnPService().RemoveMethod("Go");
        }
        public void RemoveAction_NextPage()
        {
             _S.GetUPnPService().RemoveMethod("NextPage");
        }
        public void RemoveAction_PowerOff()
        {
             _S.GetUPnPService().RemoveMethod("PowerOff");
        }
        public void RemoveAction_PowerOn()
        {
             _S.GetUPnPService().RemoveMethod("PowerOn");
        }
        public void RemoveAction_PreviousPage()
        {
             _S.GetUPnPService().RemoveMethod("PreviousPage");
        }
        public System.Net.IPEndPoint GetCaller()
        {
             return(_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
             return(_S.GetUPnPService().GetReceiver());
        }

        private class _P5_04
        {
            private P5_04 Outer = null;
            private UPnPService S;
            internal _P5_04(P5_04 n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return(S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
               S.SetStateVariable(VarName,VarValue);
            }
            public object GetStateVariable(string VarName)
            {
               return(S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[5];
                RetVal[0] = new UPnPModeratedStateVariable("PageMax", typeof(System.Int32), true);
                RetVal[0].DefaultValue = UPnPService.CreateObjectInstance(typeof(System.Int32),"1");
                RetVal[0].AddAssociation("PowerOn", "PageMax");
                RetVal[1] = new UPnPModeratedStateVariable("Power", typeof(System.Boolean), true);
                RetVal[1].AddAssociation("GetStatus", "Power");
                RetVal[1].AddAssociation("PowerOff", "Power");
                RetVal[1].AddAssociation("PowerOn", "Power");
                RetVal[2] = new UPnPModeratedStateVariable("File", typeof(System.String), true);
                RetVal[2].DefaultValue = UPnPService.CreateObjectInstance(typeof(System.String),"default.ppt");
                RetVal[2].AddAssociation("GetStatus", "File");
                RetVal[2].AddAssociation("PowerOn", "File");
                RetVal[3] = new UPnPModeratedStateVariable("PageNumber", typeof(System.Int32), true);
                RetVal[3].DefaultValue = UPnPService.CreateObjectInstance(typeof(System.Int32),"1");
                RetVal[3].AddAssociation("GetStatus", "PageNumber");
                RetVal[3].AddAssociation("Go", "PageNumber");
                RetVal[3].AddAssociation("NextPage", "PageNumber");
                RetVal[3].AddAssociation("PowerOn", "PageNumber");
                RetVal[3].AddAssociation("PreviousPage", "PageNumber");
                RetVal[4] = new UPnPModeratedStateVariable("Files", typeof(System.String), true);
                RetVal[4].DefaultValue = UPnPService.CreateObjectInstance(typeof(System.String),"default.ppt");
                RetVal[4].AddAssociation("GetFiles", "Files");

                UPnPService S = new UPnPService(1, "control", "urn:schemas-upnp-org:service:control:1", true, this);
                for(int i=0;i<RetVal.Length;++i)
                {
                   S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("GetFiles");
                S.AddMethod("GetStatus");
                S.AddMethod("Go");
                S.AddMethod("NextPage");
                S.AddMethod("PowerOff");
                S.AddMethod("PowerOn");
                S.AddMethod("PreviousPage");
                return(S);
            }

            public void GetFiles(out System.String Files)
            {
                if(Outer.External_GetFiles != null)
                {
                    Outer.External_GetFiles(out Files);
                }
                else
                {
                    Sink_GetFiles(out Files);
                }
            }
            public void GetStatus(out System.String File, out System.Boolean Power, out System.Int32 PageNumber)
            {
                if(Outer.External_GetStatus != null)
                {
                    Outer.External_GetStatus(out File, out Power, out PageNumber);
                }
                else
                {
                    Sink_GetStatus(out File, out Power, out PageNumber);
                }
            }
            public void Go(System.Int32 PageNumber)
            {
                if(Outer.External_Go != null)
                {
                    Outer.External_Go(PageNumber);
                }
                else
                {
                    Sink_Go(PageNumber);
                }
            }
            public void NextPage(out System.Int32 PageNumber)
            {
                if(Outer.External_NextPage != null)
                {
                    Outer.External_NextPage(out PageNumber);
                }
                else
                {
                    Sink_NextPage(out PageNumber);
                }
            }
            public void PowerOff(out System.Boolean Power)
            {
                if(Outer.External_PowerOff != null)
                {
                    Outer.External_PowerOff(out Power);
                }
                else
                {
                    Sink_PowerOff(out Power);
                }
            }
            public void PowerOn(System.String File, out System.Int32 PageNumber, out System.Int32 PageMax, out System.Boolean Power)
            {
                if(Outer.External_PowerOn != null)
                {
                    Outer.External_PowerOn(File, out PageNumber, out PageMax, out Power);
                }
                else
                {
                    Sink_PowerOn(File, out PageNumber, out PageMax, out Power);
                }
            }
            public void PreviousPage(out System.Int32 PageNumber)
            {
                if(Outer.External_PreviousPage != null)
                {
                    Outer.External_PreviousPage(out PageNumber);
                }
                else
                {
                    Sink_PreviousPage(out PageNumber);
                }
            }

            public Delegate_GetFiles Sink_GetFiles;
            public Delegate_GetStatus Sink_GetStatus;
            public Delegate_Go Sink_Go;
            public Delegate_NextPage Sink_NextPage;
            public Delegate_PowerOff Sink_PowerOff;
            public Delegate_PowerOn Sink_PowerOn;
            public Delegate_PreviousPage Sink_PreviousPage;
        }
        public P5_04()
        {
            _S = new _P5_04(this);
            _S.GetUPnPService().GetStateVariableObject("PageMax").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_PageMax);
            _S.GetUPnPService().GetStateVariableObject("Power").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_Power);
            _S.GetUPnPService().GetStateVariableObject("File").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_File);
            _S.GetUPnPService().GetStateVariableObject("PageNumber").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_PageNumber);
            _S.GetUPnPService().GetStateVariableObject("Files").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_Files);
            _S.Sink_GetFiles = new Delegate_GetFiles(GetFiles);
            _S.Sink_GetStatus = new Delegate_GetStatus(GetStatus);
            _S.Sink_Go = new Delegate_Go(Go);
            _S.Sink_NextPage = new Delegate_NextPage(NextPage);
            _S.Sink_PowerOff = new Delegate_PowerOff(PowerOff);
            _S.Sink_PowerOn = new Delegate_PowerOn(PowerOn);
            _S.Sink_PreviousPage = new Delegate_PreviousPage(PreviousPage);

			Init();
        }
        public P5_04(string ID):this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return(_S.GetUPnPService());
        }
        private void OnModifiedSink_PageMax(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_PageMax != null) OnStateVariableModified_PageMax(this);
        }
        private void OnModifiedSink_Power(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_Power != null) OnStateVariableModified_Power(this);
        }
        private void OnModifiedSink_File(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_File != null) OnStateVariableModified_File(this);
        }
        private void OnModifiedSink_PageNumber(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_PageNumber != null) OnStateVariableModified_PageNumber(this);
        }
        private void OnModifiedSink_Files(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_Files != null) OnStateVariableModified_Files(this);
        }
        //}}}}} End of Code Block

        #endregion

        /// <summary>
        /// Action: PowerOff
        /// </summary>
        /// <param name="Power">Associated State Variable: Power</param>
        public void PowerOff(out System.Boolean Power)
        {
			OnLogEvent("Power Off");
			ppt.ClosePresentation();
			
			Power=ppt.Power;

			Evented_PageNumber=ppt.PageNumber;
			Evented_PageMax=ppt.MaxPageNumber;
			Evented_Power=Power;
        }
        
		/// <summary>
		/// Action: GetFiles
		/// </summary>
		/// <param name="Files">Associated State Variable: Files</param>
		public void GetFiles(out System.String Files)
		{
			OnLogEvent("Get Files");
			System.Text.StringBuilder sb = new System.Text.StringBuilder();
			foreach (string s in System.IO.Directory.GetFiles("c:\\p5"))
			{
				if (sb.Length>0)
				{
					sb.Append("|");
				}
				sb.Append(s);
			}

			Files = sb.ToString();
			Evented_Files=Files;

		}
		/// <summary>
		/// Action: GetStatus
		/// </summary>
		/// <param name="File">Associated State Variable: File</param>
		/// <param name="Power">Associated State Variable: Power</param>
		/// <param name="PageNumber">Associated State Variable: PageNumber</param>
		public void GetStatus(out System.String File, out System.Boolean Power, out System.Int32 PageNumber)
		{
			OnLogEvent("GetStatus");
			File=Evented_File;
			Power=ppt.Power;
			PageNumber=ppt.PageNumber;

			Evented_Power=Power;
			Evented_PageNumber=PageNumber;
		}
		/// <summary>
		/// Action: Go
		/// </summary>
		/// <param name="PageNumber">Associated State Variable: PageNumber</param>
		public void Go(System.Int32 PageNumber)
		{
			OnLogEvent("Go");
			ppt.PageNumber=PageNumber;
			PageNumber=ppt.PageNumber;
			Evented_PageNumber=PageNumber;
		}
		/// <summary>
		/// Action: NextPage
		/// </summary>
		/// <param name="PageNumber">Associated State Variable: PageNumber</param>
		public void NextPage(out System.Int32 PageNumber)
		{
			OnLogEvent("NextPage");
			ppt.NextSlide();
			PageNumber=ppt.PageNumber;
			Evented_PageNumber=PageNumber;
		}
		/// <summary>
		/// Action: PowerOn
		/// </summary>
		/// <param name="File">Associated State Variable: File</param>
		/// <param name="PageNumber">Associated State Variable: PageNumber</param>
		/// <param name="PageMax">Associated State Variable: PageMax</param>
		/// <param name="Power">Associated State Variable: Power</param>
		public void PowerOn(System.String File, out System.Int32 PageNumber, out System.Int32 PageMax, out System.Boolean Power)
		{
			OnLogEvent("PowerOn");
			ppt.OpenPresentation(File);
			PageNumber=ppt.PageNumber;
			PageMax=ppt.MaxPageNumber;
			Power=ppt.Power;

			Evented_PageNumber=PageNumber;
			Evented_PageMax=PageMax;
			Evented_Power=Power;
		}

		/// <summary>
		/// Action: PreviousPage
		/// </summary>
		/// <param name="PageNumber">Associated State Variable: PageNumber</param>
		public void PreviousPage(out System.Int32 PageNumber)
		{
			OnLogEvent("PreviousPage");
			ppt.PreviousSlide();
			PageNumber=ppt.PageNumber;
			Evented_PageNumber=PageNumber;
			
		}

		Wnms04.Office.PowerPointController ppt;

		/// <summary>
		/// Initializes the powerpoint controller.
		/// </summary>
		public void Init()
		{
			if (OnLogEvent!=null)
			{
				OnLogEvent("Init");
			}
			ppt = new Wnms04.Office.PowerPointController();
		}
    }
}